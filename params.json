{
  "name": "EFRepository",
  "tagline": "Generic repository and pattern \"Unit of work\" for Entity framework",
  "body": "# EFRepository\r\n\r\n[![Build status](https://ci.appveyor.com/api/projects/status/vriyn5ano6rvqarb?svg=true)](https://ci.appveyor.com/project/kirkchen/efrepository)\r\n[![Code Coverage](http://sonarcovbadge.epicapp.com/?server=sonarqube.com&resource=EFRepository&metrics=coverage&ssl=true)](https://sonarqube.com/overview?id=EFRepository)\r\n[![Technical Debt](https://img.shields.io/sonar/http/sonarqube.com/EFRepository/tech_debt.svg?maxAge=2592000)](https://sonarqube.com/overview?id=EFRepository)\r\n[![NuGet](https://img.shields.io/nuget/v/KirkChen.EFRepository.svg?maxAge=2592000)](https://www.nuget.org/packages/KirkChen.EFRepository/)\r\n[![NuGet Pre Release](https://img.shields.io/nuget/vpre/KirkChen.EFRepository.svg?maxAge=2592000)](https://www.nuget.org/packages/KirkChen.EFRepository/)\r\n\r\nGeneric repository and pattern \"Unit of work\" for Entity framework\r\n\r\n## Requirements\r\n\r\n* .Net Framework 4.6.1\r\n* EntityFramework 6.1.3\r\n\r\n## Features\r\n\r\n* Generic Repository\r\n    * Basic operation\r\n        * Add\r\n        * Add range\r\n        * Get list\r\n        * Get list with condition\r\n        * Get by id\r\n        * Get with condition\r\n        * Update\r\n        * Delete\r\n        * Support generic identity\r\n    * Asynchronous operation\r\n        * Add async\r\n        * Add range async\r\n        * Get list async\r\n        * Get list with condition async\r\n        * Get by id async\r\n        * Get with condition async\r\n        * Update async\r\n        * Delete async   \r\n    * Hooks Supports\r\n        * Nested object save changes\r\n        * Soft delete\r\n        * Auto system infomation\r\n        * Audit log\r\n        * Global query filter\r\n* Unit of work\r\n\r\n## Quick Start\r\n\r\n1. Create data class with interface IEntity<TKey>\r\n\r\n    ``` csharp    \r\n    public class MyData : IEntity<int>\r\n    {        \r\n        [Key]\r\n        public int Id { get; set; }\r\n        \r\n        public string Content { get; set; }\r\n    }\r\n    ```\r\n\r\n1. Create dbContext\r\n\r\n    ``` csharp\r\n    public class MyDbContext: DbContext\r\n    {\r\n        public DbSet<MyData> MyDatas { get; set; }\r\n    }\r\n    ```\r\n\r\n1. Create repository for data class\r\n\r\n    ``` csharp\r\n    public class MyDataRepository : GenericRepository<int, MyData>, IRepository<int, MyData>\r\n    {\r\n        public MyDataRepository(MyDbContext context)\r\n            : base(context)\r\n        {\r\n            // Enable soft delete\r\n            this.RegisterPostLoadHook(new SoftDeletePostLoadHook<MyData>());\r\n            this.RegisterPostActionHook(new SoftDeletePostActionHook<MyData>());\r\n        }\r\n    }\r\n    ```\r\n\r\n1. Use reository\r\n\r\n    ``` csharp\r\n    var dbContext = new MyDbContext();\r\n    var repository = new MyDataRepository(dbContext);\r\n    var myData = repository.Get(1);\r\n    ```\r\n\r\n## Unit of work    \r\n\r\nUsing unit of work to handle transaction\r\n\r\n``` csharp\r\nusing(var dbContext = new MyDbContext())\r\nusing(var unitOfWork = new UnitOfWork(dbContext))\r\n{\r\n    var repository = new MyDataRepository(dbContext);\r\n    repository.Add(data);\r\n\r\n    var anotherRepository = new OtherDataRepository(dbContext);\r\n    repository.Add(anotherdata);\r\n\r\n    unitOfWork.SaveChanges();\r\n}\r\n```\r\n\r\n## Roadmap\r\n\r\n- [ ] Generic Repository\r\n    - [x] Basic operation\r\n        - [x] Add\r\n        - [x] Add range\r\n        - [x] Get list\r\n        - [x] Get list with condition\r\n        - [x] Get by id\r\n        - [x] Get with condition\r\n        - [x] Update\r\n        - [x] Delete\r\n        - [x] Support generic identity\r\n    - [ ] Asynchronous operation\r\n        - [ ] Add async\r\n        - [ ] Add range async\r\n        - [ ] Get list async\r\n        - [ ] Get list with condition async\r\n        - [ ] Get by id async\r\n        - [ ] Get with condition async\r\n        - [ ] Update async\r\n        - [ ] Delete async        \r\n    - [ ] Hooks Supports\r\n        - [ ] Nested object save changes\r\n        - [x] Soft delete\r\n        - [x] Auto system infomation\r\n        - [ ] Audit log\r\n        - [ ] Global query filter\r\n- [x] Unit of work",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}